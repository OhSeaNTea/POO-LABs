#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;
struct dog{
    char *name;
    char *breed;
    int age;
};


void swap(dog *a, dog *b) {
    dog *temp = a;
    a = b;
    b = temp;
}

void Initializare(dog *caine){
    string a, b;
    cout << "\nIntrodu numele cainelui: \n";
    cin >> a;
    cout << "\nIntrodu rasa cainelui: \n";
    cin >> b;
    cout << "\nIntrodu varsta cainelui: \n";
    cin>> caine->age;
    caine->name = new char (a.length()+1);
    strcpy(caine->name, a.c_str());
    caine->breed = new char (b.length()+1);
    strcpy(caine->breed, b.c_str());
}
void Afisare(dog *caine) {
cout << "\nNumele cainelui: \n" << caine->name;
cout<<"\nRasa cainelui: \n" << caine->breed;
cout << "\nVarsta cainelui\n" << caine->age;
}
void EliberareMemorie(dog *caine) {
    delete caine->name;
    caine->name=nullptr;
    delete caine->breed;
    caine->breed=nullptr;
    caine->age=0;
}
void heapify(dog arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && arr[left].age > arr[largest].age)
        largest = left;
    if (right < n && arr[right].age > arr[largest].age)
        largest = right;
    if (left < n && arr[left].age == arr[largest].age &&
        strcmp(arr[left].name, arr[largest].name) > 0)
        largest = left;
    if (right < n && arr[right].age == arr[largest].age &&
        strcmp(arr[right].name, arr[largest].name) > 0)
        largest = right;
    if (largest != i) {
        dog temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}
void heapSort(dog arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        dog temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        heapify(arr, i, 0);
    }
}
int main()
{   cout << "Introduceti numarul de caini:\n";
    int n;
    cin >> n;
    dog *caine = new dog[n];
    for(int i=0;i<n;i++){
        Initializare(&caine[i]);
    }
    cout << "\nLista cainilor inaintea sortarii:";
    for(int i=0;i<n;i++){
        Afisare(&caine[i]);
    }
    heapSort(caine,n);
    cout << "\n\nLista cainilor sortati:";
    for(int i=0;i<n;i++){
        Afisare(&caine[i]);
    }
    for(int i=0;i<n;i++){
        EliberareMemorie(&caine[i]);
    }
    return 0;
}
